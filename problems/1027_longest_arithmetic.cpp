#include <bits/stdc++.h>

using namespace std;

/*
class Solution {
    public:
        int longestArithSeqLength(vector<int>& nums) {
            vector<int> seq;
            rec(seq, nums, 0);
            return m_longest;
        }

        void rec(vector<int>& seq, const vector<int>& nums, int i) {
            const int n = seq.size();

            if (n >= 3 && seq[n-1] - seq[n-2] != seq[n-2] - seq[n-3]) {
                return;
            }

            if (i == nums.size()) {
                if (seq.size() > m_longest) {
                    m_longest = seq.size();
                }
              
                return;
            }

            seq.push_back(nums[i]);
            rec(seq, nums, i+1);

            seq.pop_back();
            rec(seq, nums, i+1);
        }

    private:
        int m_longest = 0;
        set<int> m_diffs;
};
*/

/*
class Solution {
    public:
        int longestArithSeqLength(vector<int>& nums) {
            const int n = nums.size();

            int maxLength = -1;

            for (int i = 0; i < n; i++) {
                for (int j = i+1; j < n; j++) {
                    // Difference of pair
                    int diff = nums[j] - nums[i];
                    int next = nums[j] + diff;

                    int cLength = 2;

                    for (int k = 0; k < n; k++) {
                        if (k != i && k != j) {
                            if (nums[k] == next) {
                                cLength++;
                                maxLength = max(maxLength, cLength);
                                next += diff;
                            }
                        }
                    }
                }
            }

            return maxLength;
        }
};
*/

class Solution {
    public:
        int longestArithSeqLength(vector<int>& nums) {
            const int offset = 500;

            const int n = nums.size();
            vector<vector<int>> dp(n, vector<int>(2*offset+1, 0));
            int longest = 0;

            for (int i = 1; i < n; i++) {
                for (int j = 0; j < i; j++) {
                    int diff = nums[i] - nums[j] + offset;
                    dp[i][diff] = dp[j][diff] > 0 ? dp[j][diff] + 1 : 2;
                    longest = max(longest, dp[i][diff]);
                }
            }

            return longest;
        }
};

int main() {
    vector<int> nums{410,140,384,128,112,390,39,189,290,321,52,165,166,98,370,399,204,216,450,324,9,167,10,157,381,182,307,49,300,133,155,6,203,111,229,61,114,389,293,300,107,96,402,371,36,429,364,203,120,392,378,112,287,405,425,425,127,5,289,410,376,138,12,300,370,316,110,8,426,40,111,158,142,23,314,405,335,52,5,219,304,140,37,331,208,434,358,58,152,224,147,446,154,20,199,279,109,255,162,144,284,209,324,415,423,201,194,113,97,109,368,174,102,328,411,352,17,405,377,264,294,100,207,320,120,426,439,356,371,39,413,276,376,236,259,450,112,23,443,91,274,9,302,393,93,264,404,220,340,273,94,242,174,1,248,431,385,144,9,353,366,346,240,28,121,213,439,370,226,6,176,210,24,365,263,412,361,324,430,204,231,137,198,19,95,212,190,434,357,250,189,423,97,338,253,155,88,264,169,67,381,435,374,432,94,418,390,161,266,342,31,237,355,329,17,440,236,44,214,79,206,25,342,374,368,48,245,184,48,71,233,426,86,207,222,53,229,426,276,146,286,8,116,171,403,175,245,308,149,43,122,81,306,146,434,77,450,154,28,445,299,8,264,70,375,172,298,315,164,303,329,15,157,162,160,385,365,100,52,267,378,187,57,231,260,253,71,160,259,122,165,137,378,373,122,416,448,163,88,106,57,147,429,223,135,211,39,332,139,286,125,343,317,116,21,381,301,381,307,427,81,62,165,425,396,343,15,168,61,430,381,378,36,359,170,330,178,429,332,88,21,193,367,328,318,287,386,400,107,448,294,305,38,6,287,312,247,109,426,449,156,220,368,267,303,162,144,282,144,412,241,168,312,98,177,252,216,117,90,350,214,176,429,28,247,128,404,109,45,278,192,47,249,14,328,150,124,314,203,156,67,3,11,12,260,231,224,342,286,413,409,27,306,153,420,422,232,376,25,183,76,432,71,50,347,67,113,179,294,120,123,242,218,20,184,98,122,47,143,190,43,322,39,375,117,309,80,246,356,419,371,369,153,109,180,297,53,6,325,214,199,254,283,395,292,46,429,70,129,362,148,115,45,104,146,219,8,35,193,157,81,423,393,72,47,91,359,197,275,223,165,280,111,350,375,109,240,191,151,423,212,206,39,222,389,50,37,405,443,348,97,203,440,323,393,442,7,295,316,287,148,136,223,298,121,156,249,350,246,223,288,7,368,242,364,443,203,351,300,336,333,103,128,367,360,92,242,69,366,114,226,377,138,180,203,237,154,349,68,368,424,12,175,333,422,382,196,255,212,128,390,422,43,215,420,162,187,241,127,144,369,114,188,398,359,264,290,223,181,43,281,436,68,130,313,401,297,340,132,443,243,92,315,285,439,221,19,122,378,438,312,123,12,213,112,250,331,10,110,257,225,209,252,90,209,302,425,162,246,376,98,296,421,231,249,110,108,324,55,288,67,138,378,347,60,415,238,75,164,264,127,275,147,422,93,367,239,272,390,16,53,45,292,93,52,194,139,9,318,108,278,179,34,6,429,315,410,118,163,394,188,1,247,276,204,408,250,103,132,255,86,148,291,68,394,243,106,197,263,255,351,23,24,342,129,70,294,179,435,75,352,327,47,164,25,21,376,446,380,215,431,101,331,310,12,417,173,380,118,372,336,115,83,312,144,278,222,72,394,120,145,264,262,86,42,58,167,54,179,71,276,138,319,231,313,89,232,6,5,70,80,442,411,345,125,64,291,170,268,102,380,131,239,187,77,147,448,286,127,371,370,328,95,301,437,145,353,380,303,169,307,281,268,274,147,424,295,75,153,151,273,60,227,207,91,167,24,311,320,49,239,300,283,233,85,268,439,30,431,381,266,295,164,66,116,408,18,270,195,350,416,102,337,200,346,319,145,374,44,43,387,268,205,401,337,190,146,37,360,215,292,203,259,443,339,443,296,122,351,3,74,138,161,279,87,138,149,365,93,126,424,16,329,248,431,423,399,367,374,272,327,52,24,64,225,72,16,89,3,129,407,386,300,51,206,357,86,203,175,152,220,160,113,409,88,391,442,411,171,46,229,325,381,339,405,59,121,192,231,102,100,12,349,68,449,146,171,58,363,102,133,102,208,230,133,275,368,289,63,343,112,422,84,24,373,212,68,297,257,142,370,177,307,188,80,194,304,401,166,87,356,400,391,434,445,138,38,428,146,147,303,398,286,363,171,70,147,136,223,162,152,226,33,429,432,375,411,169,434,271,277,170,363,120,434,391,408,140,73,164};
    Solution solution{};
    int len = solution.longestArithSeqLength(nums);
    cout << len << "\n";
    return 0;
}