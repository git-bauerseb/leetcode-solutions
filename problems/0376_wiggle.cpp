#include <bits/stdc++.h>

using namespace std;


// Recursive Solution
// Runtime: Exponential
class Solution {

    public:
        int wiggleMaxLength(vector<int>& nums) {
            return maxWiggleRecursive({}, false, nums, 0);
        }

    private:
        int maxWiggleRecursive(vector<int> numbers, bool positive, vector<int>& original, int i) {
            if (i == original.size()) {
                return numbers.size();
            }

            if (memo.count(i) > 0) {return memo[i];}

            if (i == 0) {
                return max(
                    maxWiggleRecursive({original[0]}, true, original, 1),
                    maxWiggleRecursive({original[0]}, false, original, 1)
                );
            }

            bool pushed = false;

            if ((positive && numbers[numbers.size()-1] < original[i])
             || (!positive && numbers[numbers.size()-1] > original[i])) {
                numbers.push_back(original[i]);
                memo[i] = numbers.size();
                pushed = true;
            }

            positive = pushed ? !positive : positive;
            return maxWiggleRecursive(numbers, positive, original, i+1);
        }

        map<int,int> memo;
};

int main() {


    vector<int> nums{-879,-364,-891,-697,-839,-386,-817,-72,675,963,-489,-299,-290,-629,556,-100,-500,758,596,-722,-623,
    267,979,-616,358,-973,238,240,968,469,539,137,448,776,185,-560,-629,-74,-20,-558,-344,-702,-223,185,-276,248,-124,
    -605,97,413,459,848,0,-554,835,-828,234,122,302,311,423,-152,846,432,933,-258,336,348,485,970,482,-989,-708,-530,
    -914,-565,643,785,563,19,-997,333,-312,813,-889,562,-341,-131,465,-917,-262,974,295,954,659,773,-203,-371,199,-580,
    707,-303,-796,504,-655,-777,773,761,-653,-309,956,841,-152,-703,580,493,-279,974,341,552,-343,-277,207,-772,-407,
    -666,-846,-442,856,-564,-702,791,-490,330,515,-835,-269,422,-684,72,-49,480,952,898,-671,-432,-617,-883,768,120,929,
    640,356,325,-164,-856,-357,19,687,-791,665,681,58,580,182,31,355,-641,-553,746,456,-671,81,803,-407,396,308,478,-421,
    209,394,-467,654,-92,618,65,984,693,796,-621,-820,-774,-514,783,-489,8,133,632,478,303,-333,-188,201,728,151,803,-579,
    792,767,-532,763,591,-299,-907,-609,74,769,996,-899,-46,-670,839,-10,-953,134,255,863,-687,640,61,-964,-41,796,160,-792,
    387,53,203,-43,982,-604,406,-559,560,-425,-496,-788,607,900,-592,433,651,-239,599,486,66,-575,490,938,495,-668,438,-877,
    482,217,632,-419,685,-819,-136,-194,-506,-350,580,-104,122,-242,485,-370,-451,623,-196,-90,-55,-131,-192,-851,748,-284,
    756,-28,-36,777,264,237,-961,-767,550,-83,-448,797,196,562,662,410,-236,-147,-101,-825,629,-33,-580,-713,463,767,667,115,
    988,302,-798,-549,-68,861,279,-67,482,248,-634,829,540,-110,-488,253,385,299,638,-247,-811,-235,338,-383,-139,936,-329,
    -205,-484,-247,-150,-122,-651,685,-573,-54,-266,-365,-17,-575,601,-141,-32,329,985,728,-319,40,241,176,-455,368,-771,545,
    -747,-220,-493,-724,565,-300,-918,-853,31,565,4,-145,558,782,-71,478,842,630,-723,-55,-571,687,116,-125,755,-803,719,-958,
    221,-134,866,-698,-939,380,-775,353,-860,874,691,-21,438,134,205,614,927,753,-98,638,167,823,626,-308,988,429,691,-87,-780,
    26,-917,-849,434,803,-387,171,317,-326,-839,-252,678,-794,615,-231,-448,-674,-100,49,646,-600,-908,-684,-648,330,-890,-181,
    -921,593,-172,-990,-219,74,44,-927,-146,-62,442,292,-425,394,685,754,-925,-665,-670,-184,-904,58,10,-293,-829,-674,731,269,176,730,651,783,
    -773,-612,724,347,730,-208,-562,388,734,678,444,-626,948,-691,-980,672,-997,200,-458,321,258,687,-785,555,836,-443,-719,902,505,-852,876,818,567,357,-425,417,447,999,-406,740,967,852,437,320,322,838,424,-124,114,695,-242,-805,558,-910,-741,-853,-1,430,-731,-794,-287,-312,377,325,-847,-985,-674,-774,
    -272,834,-812,579,116,419,-820,-602,-404,-154,-605,204,-690,-353,-272,270,-418,-228,-848,-362,959,-950,659,657,-379,73,791,253,284,984,-917,-50,
    100,119,829,834,818,-294,461,-16,-706,-954,-604,625,-716,-250,833,928,-718,689,485,610,431,-927,-123,648,-539,-68,490,-83,796,620,-446,382,969,289,
    155,-741,-535,-920,548,297,-443,726,103,-523,-77,256,442,-707,-756,798,74,337,-11,-588,-404,-622,-863,-134,-520,325,228,-93,-360,173,793,529,-75,896,838,-209,-387,692,423,919,-824,-639,175,747,-99,-261,746,-811,-264,-407,476,-147,-265,961,-393,677,200,-691,-116,-479,-606,-381,-868,-302,687,-345,237,175,-409,654,861,73,-65,884,412,905,-713,-726,510,-314,-778,-712,359,290,312,404,-361,865,-644,-940,-302,-878,599,-775,365,-734,-636,632,484,55,-584,159,-69,80,-656,-995,-30,995,-92,-43,978,854,-302,195,612,306,-905,-34,-479,448,368,-71,77,-868,-334,-203,124,916,-371,-63,-619,918,-351,-48,-996,-214,423,-719,67,-514,174,-480,-363,-727,316,139,-278,151,-143,6,-953,102,
    -911,791,367,-313,-729,-560,-511,635,604,-997,858,-589,-988,-540,803,602,401,525,627,-775,-168,634,332,-508,
    -413,-23,972,100,114,425,-17,-121,930,20,707,347,577,815,52,-20,-84,-605,799,497,-428,-334,559,-729,656,654,53,25,-782,-39,494,-159,199,-286,459,
    625,58,-285,-940,557,478,444,805,891,-708,-788,204,-600,451,386,-202,-271,-73,297,914,-866,-666,-104,-727,-903,-645,812,88,351,-583,971,-802,-997,
    156,-12,-750,-325,767,842,209,525,-154,25,397,-720,-669,-464,529,262,-951,505,-772,614,-229,610,411,837,-712,885,377,-80,-585,227,-274,821,207,-274,-922,-118,929,-790,934,-238,-240,-796,107,903,149,50,-893,468,105,-413,-627,646,-683,-574,325,-616,-793,-298,250,890,-212,-607,-88,-983,-386,-756,-701,297,384,-633,803,-684,-47,945,82,-171,333,-427,256,-127,-705,-51,-417,-582,-574,-597,-939,-462,-434,-648,-780,598,-281,-420,-154,813,384,-129,802,-431,791,-488,-245,144,-159,-268,673,602,
    -386,-555,955,297,332,567,-746,247,-481,673,272,842,579,180,0,-324,-137,507,168,-60,445,609,552,592,-337,321,407};

    Solution solution{};
    int mL = solution.wiggleMaxLength(nums);
    cout << mL << "\n";
    return 0;
}